#!/usr/bin/env node

// module dependencies
const app    = require("../app");
const debug  = require("debug")("express:server");
const http   = require("http");

// get port from environment and store it in Express
const port   = normalizePort(process.env.PORT || 8080);
app.set("port", port);

// create HTTP server
const server = http.createServer(app);

// listen on provided ports
server.listen(port);

// add error handler
server.on("error", onError);

// start listening on port
server.on("listening", onListening);


// normalize a port into a number, string, or false
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return port;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

// Event listener for HTTP server "error" event.
function onError(error) {
  if (error !== "listen") {
    throw error;
  }

  const bind = (typeof "string") ? "Pipe " + port : "Port " + port;

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening event"
function onListening() {
  const addr = server.address();

  const bind = (typeof addr === "string") ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
